{
    "projects": [
        {
            "name": "RootProject",
            "description": "Multi-module Kotlin project (server + compose desktop + shared)",
            "framework": "-",
            "primary_language": "kotlin",
            "secondary_languages": [],
            "src_to_parse": [
                "server/src/main/kotlin/**/*.kt",
                "composeApp/src/**/*.kt",
                "shared/src/**/*.kt"
            ],
            "entry_points": [],
            "subprojects": [
                {
                    "name": "server",
                    "description": "Ktor-based server",
                    "framework": "Ktor",
                    "primary_language": "kotlin",
                    "secondary_languages": [],
                    "src_to_parse": [
                        "server/src/main/kotlin/**/*.kt"
                    ],
                    "entry_points": [
                        {
                            "name": "run",
                            "file": "server/src/main/kotlin/net/sdfgsdfg/kaangpt/Application.kt:main*",
                            "commands": {
                                "gradle": "./gradlew :server:run"
                            }
                        }
                    ],
                    "subprojects": []
                },
                {
                    "name": "composeApp",
                    "description": "Compose Desktop application",
                    "framework": "ComposeDesktop",
                    "primary_language": "kotlin",
                    "secondary_languages": [],
                    "src_to_parse": [
                        "composeApp/src/**/*.kt"
                    ],
                    "entry_points": [
                        {
                            "name": "runDesktop",
                            "file": "composeApp/src/desktopMain/kotlin/main.kt:main*",
                            "commands": {
                                "gradle": "./gradlew :composeApp:run"
                            }
                        }
                    ],
                    "subprojects": []
                },
                {
                    "name": "shared",
                    "description": "Shared multiplatform library",
                    "framework": "-",
                    "primary_language": "kotlin",
                    "secondary_languages": [],
                    "src_to_parse": [
                        "shared/src/**/*.kt"
                    ],
                    "entry_points": [],
                    "subprojects": []
                }
            ]
        }
    ],
    "phase_1_and_2_complete": true,
    "cortex-1": [
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/composeApp/src/desktopMain/kotlin/App.kt",
            "chunks": {
                "imports": [
                    {
                        "id": "0001",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.animation.AnimatedVisibility",
                        "start_byte": 0,
                        "end_byte": 52,
                        "snippet": "import androidx.compose.animation.AnimatedVisibility",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0002",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.animation.expandVertically",
                        "start_byte": 53,
                        "end_byte": 103,
                        "snippet": "import androidx.compose.animation.expandVertically",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0003",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.animation.fadeIn",
                        "start_byte": 104,
                        "end_byte": 144,
                        "snippet": "import androidx.compose.animation.fadeIn",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0004",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.foundation.Image",
                        "start_byte": 145,
                        "end_byte": 185,
                        "snippet": "import androidx.compose.foundation.Image",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0005",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.foundation.layout",
                        "start_byte": 186,
                        "end_byte": 229,
                        "snippet": "import androidx.compose.foundation.layout.*",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0006",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.material.Button",
                        "start_byte": 230,
                        "end_byte": 269,
                        "snippet": "import androidx.compose.material.Button",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0007",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.material.MaterialTheme",
                        "start_byte": 270,
                        "end_byte": 316,
                        "snippet": "import androidx.compose.material.MaterialTheme",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0008",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.material.Text",
                        "start_byte": 317,
                        "end_byte": 354,
                        "snippet": "import androidx.compose.material.Text",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0009",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.runtime",
                        "start_byte": 355,
                        "end_byte": 388,
                        "snippet": "import androidx.compose.runtime.*",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0010",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.Alignment",
                        "start_byte": 389,
                        "end_byte": 425,
                        "snippet": "import androidx.compose.ui.Alignment",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0011",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.ExperimentalComposeUiApi",
                        "start_byte": 426,
                        "end_byte": 477,
                        "snippet": "import androidx.compose.ui.ExperimentalComposeUiApi",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0012",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.Modifier",
                        "start_byte": 478,
                        "end_byte": 513,
                        "snippet": "import androidx.compose.ui.Modifier",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0013",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.graphics.Color",
                        "start_byte": 514,
                        "end_byte": 555,
                        "snippet": "import androidx.compose.ui.graphics.Color",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0014",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.platform.LocalDensity",
                        "start_byte": 556,
                        "end_byte": 604,
                        "snippet": "import androidx.compose.ui.platform.LocalDensity",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0015",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.platform.LocalWindowInfo",
                        "start_byte": 605,
                        "end_byte": 656,
                        "snippet": "import androidx.compose.ui.platform.LocalWindowInfo",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0016",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.text.font.FontFamily",
                        "start_byte": 657,
                        "end_byte": 704,
                        "snippet": "import androidx.compose.ui.text.font.FontFamily",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0017",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.unit.dp",
                        "start_byte": 705,
                        "end_byte": 739,
                        "snippet": "import androidx.compose.ui.unit.dp",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0018",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.unit.sp",
                        "start_byte": 740,
                        "end_byte": 774,
                        "snippet": "import androidx.compose.ui.unit.sp",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0019",
                        "type": "import_header",
                        "category": "imports",
                        "name": "kaangpt_kotlin.composeapp.generated.resources.Res",
                        "start_byte": 775,
                        "end_byte": 831,
                        "snippet": "import kaangpt_kotlin.composeapp.generated.resources.Res",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0020",
                        "type": "import_header",
                        "category": "imports",
                        "name": "kaangpt_kotlin.composeapp.generated.resources.compose_multiplatform",
                        "start_byte": 832,
                        "end_byte": 906,
                        "snippet": "import kaangpt_kotlin.composeapp.generated.resources.compose_multiplatform",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0021",
                        "type": "import_header",
                        "category": "imports",
                        "name": "org.jetbrains.compose.resources.painterResource",
                        "start_byte": 907,
                        "end_byte": 961,
                        "snippet": "import org.jetbrains.compose.resources.painterResource",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0022",
                        "type": "import_header",
                        "category": "imports",
                        "name": "org.jetbrains.compose.ui.tooling.preview.Preview",
                        "start_byte": 962,
                        "end_byte": 1017,
                        "snippet": "import org.jetbrains.compose.ui.tooling.preview.Preview",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0023",
                        "type": "import_header",
                        "category": "imports",
                        "name": "utils.Progress",
                        "start_byte": 1018,
                        "end_byte": 1039,
                        "snippet": "import utils.Progress",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0024",
                        "type": "import_header",
                        "category": "imports",
                        "name": "utils.Video",
                        "start_byte": 1040,
                        "end_byte": 1058,
                        "snippet": "import utils.Video",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0025",
                        "type": "import_header",
                        "category": "imports",
                        "name": "utils.innerShadow",
                        "start_byte": 1059,
                        "end_byte": 1083,
                        "snippet": "import utils.innerShadow",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0026",
                        "type": "import_header",
                        "category": "imports",
                        "name": "utils.topGradientOverlay",
                        "start_byte": 1084,
                        "end_byte": 1115,
                        "snippet": "import utils.topGradientOverlay",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "functions": [
                    {
                        "id": "0027",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "MainApp",
                        "start_byte": 1117,
                        "end_byte": 5222,
                        "snippet": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\n@Preview\nfun MainApp() {\n    // Allow AWT video to be overlaid with others\n    System.setProperty(\"compose.interop.blending\", \"true\")\n\n    var showContent by remember { mutableStateOf(false) }\n    var showSettings by remember { mutableStateOf(false) }\n\n    val windowInfo = LocalWindowInfo.current\n    val density = LocalDensity.current\n    val videoHeight = 500.dp\n    val desktopWidth = with(density) { windowInfo.containerSize.width.toDp() }\n    val desktopHeight = with(density) { windowInfo.containerSize.height.toDp() }\n    val videoTopY = desktopHeight - videoHeight\n\n    // Debug logs\n    println(\"Desktop size (windowInfo.containerSize):       ${windowInfo.containerSize}\")\n    println(\"windowInfo.containerSize.width px:             ${windowInfo.containerSize.width}\")\n    println(\"windowInfo.containerSize.height px:            ${windowInfo.containerSize.height}\")\n    println(\"desktopWidth:                                  $desktopWidth dp\")\n    println(\"desktopHeight:                                 $desktopHeight dp\")\n    println(\"Video Top Y:                                   $videoTopY dp\")\n    println(\"Density:                                       ${density.density}\")\n    //xx ==============\n\n    println(\"---------------[ Width x Height] ------------[ ${desktopWidth} ]----------------[ ${desktopHeight} ]-----------------\")\n\n    MaterialTheme {\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n//                .innerShadow()\n        ) {\n            // Remaining 1/3 above the Video, to the top of the screen\n            Box(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(videoTopY)\n                    .topGradientOverlay(videoTopY, density)\n            )\n\n            // Bottom 2/3, the Video\n            Video(\n                url = \"file:////Users/x/Desktop/earth.mp4\",\n                isResumed = true,\n                volume = 1f,\n                speed = 1f,\n                seek = 0f,\n                isFullscreen = false,\n                progressState = mutableStateOf(Progress(0f, 100L)),\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(600.dp)\n//                    .height(desktopHeight)\n//                    .shadow(10.dp, RoundedCornerShape(10.dp))\n                    .innerShadow()\n                    .align(Alignment.BottomCenter),\n                onFinish = {}\n            )\n\n            Box(\n                modifier = Modifier.matchParentSize(),\n                contentAlignment = Alignment.TopCenter,\n            ) {\n                Column(\n                    Modifier.padding(top = 20.dp),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    Button(\n                        modifier = Modifier.padding(all = 4.dp).align(Alignment.CenterHorizontally),\n                        onClick = { showContent = !showContent }\n                    ) {\n                        Text(\"Click me!\")\n                    }\n\n                    AnimatedVisibility(\n                        visible = showContent,\n                        enter = fadeIn() + expandVertically() // slide, fade, shrink, expand\n                    ) {\n                        val greeting = remember { \"Hello, World!\" } // Replace with your actual greeting logic\n                        Column(horizontalAlignment = Alignment.CenterHorizontally) {\n                            Image(painterResource(Res.drawable.compose_multiplatform), null)\n                            Text(\"Greeting: $greeting\", color = Color.DarkGray, fontSize = 48.sp, fontFamily = FontFamily.Cursive)\n                        }\n                    }\n                    Button(\n                        modifier = Modifier.padding(all = 4.dp).align(Alignment.CenterHorizontally),\n                        onClick = { showSettings = !showSettings }\n                    ) {\n                        Text(\"Settings\")\n\n                    }\n                }\n            }\n        }\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`MainApp`",
                            "description": "showContent, showSettings: 'Boolean'; local vars: windowInfo, density\n- sets 'System.setProperty'('compose.interop.blending','true') => transparency overlay\n- obtains size => desktopWidth, desktopHeight\n- layout:\n• MaterialTheme -> root Box(fillMaxSize)\n   ├─ Box(fillMaxWidth, height=videoTopY).`topGradientOverlay`(videoTopY,density)\n   ├─ `Video`(url='file:////Users/x/Desktop/earth.mp4',progressState=`Progress`(0f,100L),modifier=.innerShadow())(bottom)\n   └─ Box(matchParentSize, top-centered Column of Buttons):\n       - Button('Click me!') => toggles showContent => `AnimatedVisibility` reveals greeting image+text\n       - Button('Settings') => toggles showSettings (no further UI yet)\n- debug logs screen size & device density\nno new insights from this snippet\nconclusion: orchestrates main UI layering: gradient top region, embedded video w/ shadow, optional content expansion",
                            "cluster": [
                                "ui"
                            ],
                            "complexity": 6,
                            "returns": "Unit"
                        }
                    }
                ],
                "classes": [],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/composeApp/src/desktopMain/kotlin/main.kt",
            "chunks": {
                "imports": [
                    {
                        "id": "0028",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.foundation.gestures.detectDragGestures",
                        "start_byte": 0,
                        "end_byte": 62,
                        "snippet": "import androidx.compose.foundation.gestures.detectDragGestures",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0029",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.foundation.layout.Box",
                        "start_byte": 63,
                        "end_byte": 108,
                        "snippet": "import androidx.compose.foundation.layout.Box",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0030",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.foundation.layout.fillMaxSize",
                        "start_byte": 109,
                        "end_byte": 162,
                        "snippet": "import androidx.compose.foundation.layout.fillMaxSize",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0031",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.runtime",
                        "start_byte": 163,
                        "end_byte": 196,
                        "snippet": "import androidx.compose.runtime.*",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0032",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.Alignment",
                        "start_byte": 197,
                        "end_byte": 233,
                        "snippet": "import androidx.compose.ui.Alignment",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0033",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.ExperimentalComposeUiApi",
                        "start_byte": 234,
                        "end_byte": 285,
                        "snippet": "import androidx.compose.ui.ExperimentalComposeUiApi",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0034",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.Modifier",
                        "start_byte": 286,
                        "end_byte": 321,
                        "snippet": "import androidx.compose.ui.Modifier",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0035",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.input.pointer.pointerInput",
                        "start_byte": 322,
                        "end_byte": 375,
                        "snippet": "import androidx.compose.ui.input.pointer.pointerInput",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0036",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.platform.LocalDensity",
                        "start_byte": 376,
                        "end_byte": 424,
                        "snippet": "import androidx.compose.ui.platform.LocalDensity",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0037",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.platform.LocalWindowInfo",
                        "start_byte": 425,
                        "end_byte": 476,
                        "snippet": "import androidx.compose.ui.platform.LocalWindowInfo",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0038",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.unit.DpSize",
                        "start_byte": 477,
                        "end_byte": 515,
                        "snippet": "import androidx.compose.ui.unit.DpSize",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0039",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.unit.dp",
                        "start_byte": 516,
                        "end_byte": 550,
                        "snippet": "import androidx.compose.ui.unit.dp",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0040",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.window",
                        "start_byte": 551,
                        "end_byte": 586,
                        "snippet": "import androidx.compose.ui.window.*",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0041",
                        "type": "import_header",
                        "category": "imports",
                        "name": "treesitter.demo",
                        "start_byte": 587,
                        "end_byte": 659,
                        "snippet": "import treesitter.demo\n//import antlr.parseKt\n//import antlr.parsePython",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0042",
                        "type": "import_header",
                        "category": "imports",
                        "name": "java.awt.Toolkit",
                        "start_byte": 660,
                        "end_byte": 683,
                        "snippet": "import java.awt.Toolkit",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "functions": [
                    {
                        "id": "0043",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "main",
                        "start_byte": 685,
                        "end_byte": 1523,
                        "snippet": "fun main() = application {\n    val screenSize = Toolkit.getDefaultToolkit().screenSize\n    val desktopWidth = screenSize.width.dp\n    val desktopHeight = screenSize.height.dp\n\n    //xx ==============\n//    parseKt()\n//    parsePython()\n\n//    demo()\n    //xx ==============\n\n    val windowState = rememberWindowState(\n        position = WindowPosition(Alignment.Center),\n        size = DpSize(desktopWidth * 4 / 5, desktopHeight * 4 / 5)\n    )\n\n    Window(\n        title = \"KaanGPT - Codebase Comprehension Engine - Desktop App\",\n        state = windowState,\n        alwaysOnTop = false,\n        undecorated = true,\n        transparent = true,\n        onCloseRequest = ::exitApplication,\n    ) {\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n        ) {\n            SetupWindow(windowState)\n        }\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`main`",
                            "description": "no params; obtains screen dimensions from 'Toolkit.getDefaultToolkit()', sets up a Compose 'application' block:\n- sets 'windowState' with initial position & size => 'WindowState'\n- calls 'Window'(title='KaanGPT...', alwaysOnTop=false, undecorated=true, transparent=true, onCloseRequest='exitApplication')\n- inside 'Window' => local root Box -> calls `SetupWindow`(windowState)\n- updated insight: window styling is undecorated & transparent, custom onCloseRequest\ncall graph => `main` -> `SetupWindow`\nconclusion: entry point launching the Compose Desktop app with a custom-styled window, bridging to `SetupWindow`",
                            "cluster": [
                                "entry"
                            ],
                            "complexity": 2,
                            "returns": "Unit"
                        }
                    },
                    {
                        "id": "0044",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "SetupWindow",
                        "start_byte": 1525,
                        "end_byte": 2743,
                        "snippet": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun SetupWindow(windowState: WindowState) {\n    val windowInfo = LocalWindowInfo.current\n    val density = LocalDensity.current\n\n    val desktopWidth = with(density) { windowInfo.containerSize.width.toDp() }\n    val desktopHeight = with(density) { windowInfo.containerSize.height.toDp() }\n\n    LaunchedEffect(Unit) {\n        windowState.size = DpSize(desktopWidth / 2, desktopHeight / 2)\n        windowState.position = WindowPosition(desktopWidth / 2, desktopHeight / 2)\n    }\n\n    var dragOffsetX by remember { mutableStateOf(0.dp) }\n    var dragOffsetY by remember { mutableStateOf(0.dp) }\n\n    LaunchedEffect(dragOffsetX, dragOffsetY) {\n        windowState.position = WindowPosition(\n            windowState.position.x + dragOffsetX,\n            windowState.position.y + dragOffsetY\n        )\n    }\n\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .pointerInput(Unit) {\n                detectDragGestures { _, dragAmount ->\n                    dragOffsetX += with(density) { dragAmount.x.toDp() }\n                    dragOffsetY += with(density) { dragAmount.y.toDp() }\n                }\n            }\n    ) {\n        MainApp()\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`SetupWindow`",
                            "description": "windowState: 'WindowState'\n- uses 'LocalWindowInfo','LocalDensity' => obtains container size\n- sets windowState.size & position => half screen\n- drag logic w/ 'detectDragGestures' => repositions window\n- called from `main` inside the Window block\nno new insights from this snippet\nconclusion: configures top-level draggable window, bridging to `MainApp`",
                            "cluster": [
                                "ui"
                            ],
                            "complexity": 3,
                            "returns": "Unit"
                        }
                    }
                ],
                "classes": [],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/composeApp/src/desktopMain/kotlin/treesitter/Cortex.kt",
            "chunks": {
                "imports": [
                    {
                        "id": "0045",
                        "type": "import_header",
                        "category": "imports",
                        "name": "io.github.treesitter.ktreesitter.Language",
                        "start_byte": 20,
                        "end_byte": 68,
                        "snippet": "import io.github.treesitter.ktreesitter.Language",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0046",
                        "type": "import_header",
                        "category": "imports",
                        "name": "io.github.treesitter.ktreesitter.Parser",
                        "start_byte": 69,
                        "end_byte": 292,
                        "snippet": "import io.github.treesitter.ktreesitter.Parser\n\n\n// xx  - --- - --  - --  ABANDONED  - - - - -- -   -  //  NOT WORKING, PROB NEEDS GRAMMARS, WHATEVER\n// TODO: Link to the PR to the kotlin-treesitter repo   `Issue`   ( lol )",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "functions": [
                    {
                        "id": "0047",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "demo",
                        "start_byte": 293,
                        "end_byte": 1372,
                        "snippet": "fun demo() {\n    val code = \"\"\"\n        const greet = (name) => {\n            return `Hello !`;\n        };\n    \"\"\".trimIndent()\n\n\n\n\n//    val language = Language(\"tree-sitter-javascript\")\n    val language = Language(\"javascript\")\n//    val jsLanguage = Language(NativeUtils.loadLibrary(\"tree-sitter-javascript\")) // Adjust path if needed\n\n    val parser = Parser(language)\n    val tree = parser.parse(\"fun main() {}\")\n    val rootNode = tree.rootNode\n\n    print(\"ldjskfghsjfdgh\")\n    assert(rootNode.type == \"source_file\")\n    assert(rootNode.startPoint.column.toInt() == 0)\n    assert(rootNode.endPoint.column.toInt() == 13)\n\n    println(\"Root node: ${rootNode.type}\")\n    // Now recurse through the entire rootNode\n    fun recurse(node: io.github.treesitter.ktreesitter.Node, depth: Int = 0) {\n        println(\"  \".repeat(depth) + node.type)\n        for (i in 0 until node.childCount.toInt()) {\n            node.child(i.toUInt())?.let { recurse(it, depth + 1) }\n        }\n    }\n\n    recurse(rootNode)\n\n    val tree2 = parser.parse(code)\n    println(tree2.rootNode.toString())\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0048",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "main",
                        "start_byte": 1374,
                        "end_byte": 1399,
                        "snippet": "fun main() {\n    demo()\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`main`",
                            "description": "no params; obtains screen dimensions from 'Toolkit.getDefaultToolkit()', sets up a Compose 'application' block:\n- sets 'windowState' with initial position & size => 'WindowState'\n- calls 'Window'(title='KaanGPT...', alwaysOnTop=false, undecorated=true, transparent=true, onCloseRequest='exitApplication')\n- inside 'Window' => local root Box -> calls `SetupWindow`(windowState)\n- updated insight: window styling is undecorated & transparent, custom onCloseRequest\ncall graph => `main` -> `SetupWindow`\nconclusion: entry point launching the Compose Desktop app with a custom-styled window, bridging to `SetupWindow`",
                            "cluster": [
                                "entry"
                            ],
                            "complexity": 2,
                            "returns": "Unit"
                        }
                    }
                ],
                "classes": [],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/composeApp/src/desktopMain/kotlin/utils/Ext.kt",
            "chunks": {
                "imports": [
                    {
                        "id": "0049",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.Modifier",
                        "start_byte": 15,
                        "end_byte": 50,
                        "snippet": "import androidx.compose.ui.Modifier",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0050",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.draw.drawWithContent",
                        "start_byte": 51,
                        "end_byte": 98,
                        "snippet": "import androidx.compose.ui.draw.drawWithContent",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0051",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.geometry.Offset",
                        "start_byte": 99,
                        "end_byte": 141,
                        "snippet": "import androidx.compose.ui.geometry.Offset",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0052",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.geometry.Size",
                        "start_byte": 142,
                        "end_byte": 182,
                        "snippet": "import androidx.compose.ui.geometry.Size",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0053",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.graphics.Brush",
                        "start_byte": 183,
                        "end_byte": 224,
                        "snippet": "import androidx.compose.ui.graphics.Brush",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0054",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.graphics.Color",
                        "start_byte": 225,
                        "end_byte": 266,
                        "snippet": "import androidx.compose.ui.graphics.Color",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0055",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.graphics.TileMode",
                        "start_byte": 267,
                        "end_byte": 311,
                        "snippet": "import androidx.compose.ui.graphics.TileMode",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0056",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.unit.Density",
                        "start_byte": 312,
                        "end_byte": 351,
                        "snippet": "import androidx.compose.ui.unit.Density",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0057",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.unit.Dp",
                        "start_byte": 352,
                        "end_byte": 463,
                        "snippet": "import androidx.compose.ui.unit.Dp\n\n// for Bottom half,  Earth Rectangle\n// Change to YELLOW for visual testing",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "functions": [
                    {
                        "id": "0058",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "innerShadow",
                        "start_byte": 464,
                        "end_byte": 1090,
                        "snippet": "fun Modifier.innerShadow() = then(\n    drawWithContent {\n        drawContent()  // Draw the original content (video)\n\n        val gradient = Brush.radialGradient(\n            colors = listOf(Color.Transparent, Color.Black.copy(alpha = 0.97f)),\n            center = Offset(size.width / 2, size.height / 2),\n            tileMode = TileMode.Clamp,\n            radius = size.maxDimension / 2,\n        )\n\n        // Apply the gradient over the entire rectangle of the video player\n        drawRect(\n            brush = gradient,\n            size = size,\n            topLeft = Offset.Zero  // Starts from the edges\n        )\n    }\n)",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`innerShadow`",
                            "description": "no params in snippet; presumably an extension on 'Modifier'\n- usage => .innerShadow() in `MainApp`, applying an internal shadow effect around the composable\n- no further details from snippet\nconclusion: custom UI effect for shadowing interior edges",
                            "cluster": [
                                "uiFx"
                            ],
                            "complexity": 2,
                            "returns": "Modifier"
                        }
                    },
                    {
                        "id": "0059",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "topGradientOverlay",
                        "start_byte": 1092,
                        "end_byte": 2021,
                        "snippet": "fun Modifier.topGradientOverlay(videoTopYDp: Dp, density: Density) = this.then(\n    Modifier.drawWithContent {\n        drawContent() // Draw the original content\n\n        // Calculate the height in pixels for the gradient overlay above the video\n        val gradientHeightPx = with(density) { videoTopYDp.toPx() }\n\n        // Create a gradient from almost fully transparent to opaque black\n        val gradient = Brush.verticalGradient(\n            colors = listOf(Color.Black.copy(alpha = 0.0f), Color.Black),\n            startY = 0f,\n            endY = 150f // Fixed endY for consistent rendering across different densities\n        )\n\n        // Draw the gradient overlay starting from the top of the desktop to the top of the video\n        drawRect(\n            brush = gradient,\n            size = Size(size.width, gradientHeightPx),\n            topLeft = Offset(0f, 0f) // Start from the top of the desktop\n        )\n    }\n)",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`topGradientOverlay`",
                            "description": "height: 'Dp', density: 'Density'\n- extension on 'Modifier'? from snippet => .topGradientOverlay(videoTopY, density)\n- presumably draws a gradient from the top portion downward\nconclusion: custom UI overlay for top area shading",
                            "cluster": [
                                "uiFx"
                            ],
                            "complexity": 2,
                            "returns": "Modifier"
                        }
                    }
                ],
                "classes": [],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/composeApp/src/desktopMain/kotlin/utils/jetbrainsPlayer.kt",
            "chunks": {
                "imports": [
                    {
                        "id": "0060",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.runtime",
                        "start_byte": 15,
                        "end_byte": 48,
                        "snippet": "import androidx.compose.runtime.*",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0061",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.Modifier",
                        "start_byte": 49,
                        "end_byte": 84,
                        "snippet": "import androidx.compose.ui.Modifier",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0062",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.awt.SwingPanel",
                        "start_byte": 85,
                        "end_byte": 126,
                        "snippet": "import androidx.compose.ui.awt.SwingPanel",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0063",
                        "type": "import_header",
                        "category": "imports",
                        "name": "androidx.compose.ui.graphics.Color",
                        "start_byte": 127,
                        "end_byte": 168,
                        "snippet": "import androidx.compose.ui.graphics.Color",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0064",
                        "type": "import_header",
                        "category": "imports",
                        "name": "kotlinx.coroutines.delay",
                        "start_byte": 169,
                        "end_byte": 200,
                        "snippet": "import kotlinx.coroutines.delay",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0065",
                        "type": "import_header",
                        "category": "imports",
                        "name": "kotlinx.coroutines.isActive",
                        "start_byte": 201,
                        "end_byte": 235,
                        "snippet": "import kotlinx.coroutines.isActive",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0066",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.factory.discovery.NativeDiscovery",
                        "start_byte": 236,
                        "end_byte": 295,
                        "snippet": "import uk.co.caprica.vlcj.factory.discovery.NativeDiscovery",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0067",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.player.base.MediaPlayer",
                        "start_byte": 296,
                        "end_byte": 345,
                        "snippet": "import uk.co.caprica.vlcj.player.base.MediaPlayer",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0068",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.player.base.MediaPlayerEventAdapter",
                        "start_byte": 346,
                        "end_byte": 407,
                        "snippet": "import uk.co.caprica.vlcj.player.base.MediaPlayerEventAdapter",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0069",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.player.component.CallbackMediaPlayerComponent",
                        "start_byte": 408,
                        "end_byte": 479,
                        "snippet": "import uk.co.caprica.vlcj.player.component.CallbackMediaPlayerComponent",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0070",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent",
                        "start_byte": 480,
                        "end_byte": 551,
                        "snippet": "import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0071",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.player.component.InputEvents",
                        "start_byte": 552,
                        "end_byte": 606,
                        "snippet": "import uk.co.caprica.vlcj.player.component.InputEvents",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0072",
                        "type": "import_header",
                        "category": "imports",
                        "name": "uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer",
                        "start_byte": 607,
                        "end_byte": 668,
                        "snippet": "import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0073",
                        "type": "import_header",
                        "category": "imports",
                        "name": "java.awt.Component",
                        "start_byte": 669,
                        "end_byte": 694,
                        "snippet": "import java.awt.Component",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0074",
                        "type": "import_header",
                        "category": "imports",
                        "name": "kotlin.math.roundToInt",
                        "start_byte": 695,
                        "end_byte": 1010,
                        "snippet": "import kotlin.math.roundToInt\n\n\n/**\n * Removed lots of code from Jetbrains' Experimental Compose Desktop Video Player at github\n *      - i.e.  `VideoPlayerState` , unnecessary constructors etc....\n *\n *  >    https://github.com/JetBrains/compose-multiplatform/tree/master/experimental/components/VideoPlayer\n *\n */",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "functions": [
                    {
                        "id": "0076",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "Video",
                        "start_byte": 1218,
                        "end_byte": 3233,
                        "snippet": "@Composable\nfun Video(\n    url: String,\n    isResumed: Boolean,\n    volume: Float,\n    speed: Float,\n    seek: Float,\n    isFullscreen: Boolean,\n    progressState: MutableState<Progress>,\n    modifier: Modifier,\n    onFinish: (() -> Unit)?\n) {\n    val mediaPlayerComponent = remember { initializeMediaPlayerComponent() }\n    val mediaPlayer = remember { mediaPlayerComponent.mediaPlayer() }\n    mediaPlayer.emitProgressTo(progressState)\n    mediaPlayer.setupVideoFinishHandler(onFinish)\n\n    val factory = remember { { mediaPlayerComponent } }\n    /* OR the following code and using SwingPanel(factory = { factory }, ...) */\n    // val factory by rememberUpdatedState(mediaPlayerComponent)\n\n    LaunchedEffect(url) { mediaPlayer.media().play/*OR .start*/(url) }\n    LaunchedEffect(seek) { mediaPlayer.controls().setPosition(seek) }\n    LaunchedEffect(speed) { mediaPlayer.controls().setRate(speed) }\n    LaunchedEffect(volume) { mediaPlayer.audio().setVolume(volume.toPercentage()) }\n    LaunchedEffect(isResumed) { mediaPlayer.controls().setPause(!isResumed) }\n    LaunchedEffect(isFullscreen) {\n        if (mediaPlayer is EmbeddedMediaPlayer) {\n            /*\n             * To be able to access window in the commented code below,\n             * extend the player composable function from WindowScope.\n             * See https://github.com/JetBrains/compose-jb/issues/176#issuecomment-812514936\n             * and its subsequent comments.\n             *\n             * We could also just fullscreen the whole window:\n             * `window.placement = WindowPlacement.Fullscreen`\n             * See https://github.com/JetBrains/compose-multiplatform/issues/1489\n             */\n            // mediaPlayer.fullScreen().strategy(ExclusiveModeFullScreenStrategy(window))\n            mediaPlayer.fullScreen().toggle()\n        }\n    }\n    DisposableEffect(Unit) { onDispose(mediaPlayer::release) }\n\n    SwingPanel(\n        factory = factory,\n        background = Color.Transparent,\n        modifier = modifier\n    )\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`Video`",
                            "description": "url: 'String'; isResumed, isFullscreen: 'Boolean'; volume, speed, seek: 'Float'; progressState: 'MutableState'<`Progress`>; onFinish: (() -> 'Unit')?; modifier: 'Modifier'\n- calls `initializeMediaPlayerComponent` => obtains mediaPlayer\n- mediaPlayer => `emitProgressTo`(progressState), `setupVideoFinishHandler`(onFinish)\n- 'LaunchedEffect' => .play(url), .setVolume(volume*100), .setRate(speed), .setPause(!isResumed)\n- toggles fullscreen if isFullscreen\n- composable => 'SwingPanel' bridging AWT\n- used in `MainApp` with fraction=0.0, timeMillis=100 in `Progress`\nconclusion: embeddable VLC-based media player for Compose, reliant on `Progress` to monitor playback",
                            "cluster": [
                                "media"
                            ],
                            "complexity": 8,
                            "returns": "Unit"
                        }
                    },
                    {
                        "id": "0077",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "toPercentage",
                        "start_byte": 3235,
                        "end_byte": 3300,
                        "snippet": "private fun Float.toPercentage(): Int = (this * 100).roundToInt()",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`toPercentage`",
                            "description": "receiver: Float\n- presumably an extension converting volume (0..1) => integer scale 0..100\n- used inside `Video` => mediaPlayer.audio().setVolume(volume.toPercentage())\nconclusion: small helper for volume scaling, bridging fraction-based logic to integer percentage input for the underlying player",
                            "cluster": [
                                "util"
                            ],
                            "complexity": 1,
                            "returns": "Int"
                        }
                    },
                    {
                        "id": "0078",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "initializeMediaPlayerComponent",
                        "start_byte": 3446,
                        "end_byte": 3722,
                        "snippet": "private fun initializeMediaPlayerComponent(): Component {\n    NativeDiscovery().discover()\n    return if (isMacOS()) {\n        CallbackMediaPlayerComponent(null, null, InputEvents.NONE, true, null, null, null, null);\n    } else {\n        EmbeddedMediaPlayerComponent()\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`initializeMediaPlayerComponent`",
                            "description": "no params\n- 'NativeDiscovery().discover()' => sets up VLC environment\n- if `isMacOS` => returns 'CallbackMediaPlayerComponent'(...), else => 'EmbeddedMediaPlayerComponent()'\n- used by `Video` => create AWT media player\n- call graph => `initializeMediaPlayerComponent` -> `isMacOS`\nconclusion: constructs correct VLCJ component for Compose, bridging to native video playback",
                            "cluster": [
                                "media",
                                "init"
                            ],
                            "complexity": 4,
                            "returns": "'Component'"
                        }
                    },
                    {
                        "id": "0079",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "setupVideoFinishHandler",
                        "start_byte": 3936,
                        "end_byte": 4440,
                        "snippet": "@Composable\nprivate fun MediaPlayer.setupVideoFinishHandler(onFinish: (() -> Unit)?) {\n    DisposableEffect(onFinish) {\n        val listener = object : MediaPlayerEventAdapter() {\n            override fun finished(mediaPlayer: MediaPlayer) {\n                onFinish?.invoke()\n                mediaPlayer.submit { mediaPlayer.controls().play() }\n            }\n        }\n        events().addMediaPlayerEventListener(listener)\n        onDispose { events().removeMediaPlayerEventListener(listener) }\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`setupVideoFinishHandler`",
                            "description": "mediaPlayer: 'MediaPlayer'; onFinish: (() -> Unit)?\n- presumably sets up a callback for 'MediaPlayerEventAdapter' or similar to trigger 'onFinish' when media completes\n- invoked by `Video` to handle end-of-playback events\nconclusion: couples completion events with provided 'onFinish' callback for advanced control flows",
                            "cluster": [
                                "media"
                            ],
                            "complexity": 2,
                            "returns": "Unit"
                        }
                    },
                    {
                        "id": "0080",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "emitProgressTo",
                        "start_byte": 4799,
                        "end_byte": 5120,
                        "snippet": "@Composable\nprivate fun MediaPlayer.emitProgressTo(state: MutableState<Progress>) {\n    LaunchedEffect(key1 = Unit) {\n        while (isActive) {\n            val fraction = status().position()\n            val time = status().time()\n            state.value = Progress(fraction, time)\n            delay(50)\n        }\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`emitProgressTo`",
                            "description": "mediaPlayer: 'MediaPlayer'; progressState: 'MutableState'<`Progress`>\n- presumably an extension function or helper that updates 'progressState' with real-time playback progress\n- likely invoked inside `Video` to sync UI state with player time/position\nconclusion: ensures reactive progress updates for the UI to reflect playback timeline",
                            "cluster": [
                                "media"
                            ],
                            "complexity": 2,
                            "returns": "Unit"
                        }
                    },
                    {
                        "id": "0081",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "mediaPlayer",
                        "start_byte": 5296,
                        "end_byte": 5535,
                        "snippet": "private fun Component.mediaPlayer() = when (this) {\n    is CallbackMediaPlayerComponent -> mediaPlayer()\n    is EmbeddedMediaPlayerComponent -> mediaPlayer()\n    else -> error(\"mediaPlayer() can only be called on vlcj player components\")\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    },
                    {
                        "id": "0082",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "isMacOS",
                        "start_byte": 5537,
                        "end_byte": 5635,
                        "snippet": "fun isMacOS() = System.getProperty(\"os.name\")?.lowercase()?.contains(Regex(\"mac|darwin\")) ?: false",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`isMacOS`",
                            "description": "no params\n- uses 'System.getProperty'(\"os.name\")?.lowercase()?.contains('Regex'(\"mac|darwin\")) ?: false\n- checks presence of 'mac'|'darwin'\n- used by `initializeMediaPlayerComponent` => choose correct VLCJ path\nconclusion: determines if running on mac-based OS, returns Boolean",
                            "cluster": [
                                "platform"
                            ],
                            "complexity": 1,
                            "returns": "Boolean"
                        }
                    }
                ],
                "classes": [
                    {
                        "id": "0075",
                        "type": "class_declaration",
                        "category": "classes",
                        "name": "Progress",
                        "start_byte": 1012,
                        "end_byte": 1216,
                        "snippet": "data class Progress(\n    val fraction: Float,\n    // TODO: Use kotlin.time.Duration when Kotlin version is updated.\n    //  See https://github.com/Kotlin/api-guidelines/issues/6\n    val timeMillis: Long\n)",
                        "exported": false,
                        "import_path": null,
                        "arcana": {
                            "name": "`Progress`",
                            "description": "fraction: 'Float'; timeMillis: 'Long'\n- data class storing playback fraction [0..1], elapsed time in ms\n- used in `MainApp` => `Video` as initial empty state => fraction=0.0, timeMillis=100\n- minimal, no transformations aside from holding progress data\nconclusion: central container for video playback progress",
                            "cluster": [
                                "media"
                            ],
                            "complexity": 1,
                            "returns": "`Progress`"
                        }
                    }
                ],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/shared/src/commonMain/kotlin/Constants.kt",
            "chunks": {
                "imports": [],
                "functions": [],
                "classes": [],
                "variables": [
                    {
                        "id": "0083",
                        "type": "property_declaration",
                        "category": "variables",
                        "name": null,
                        "start_byte": 0,
                        "end_byte": 28,
                        "snippet": "const val SERVER_PORT = 8080",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/shared/src/commonMain/kotlin/Greeting.kt",
            "chunks": {
                "imports": [],
                "functions": [
                    {
                        "id": "0085",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "Greeting.greet",
                        "start_byte": 63,
                        "end_byte": 132,
                        "snippet": "fun greet(): String {\n        return \"Hello, ${platform.name}!\"\n    }",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "classes": [
                    {
                        "id": "0084",
                        "type": "class_declaration",
                        "category": "classes",
                        "name": "Greeting",
                        "start_byte": 0,
                        "end_byte": 134,
                        "snippet": "class Greeting {\n    private val platform = getPlatform()\n\n    fun greet(): String {\n        return \"Hello, ${platform.name}!\"\n    }\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/shared/src/commonMain/kotlin/Platform.kt",
            "chunks": {
                "imports": [],
                "functions": [
                    {
                        "id": "0087",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "getPlatform",
                        "start_byte": 45,
                        "end_byte": 79,
                        "snippet": "expect fun getPlatform(): Platform",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "classes": [
                    {
                        "id": "0086",
                        "type": "class_declaration",
                        "category": "classes",
                        "name": "Platform",
                        "start_byte": 0,
                        "end_byte": 43,
                        "snippet": "interface Platform {\n    val name: String\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "variables": [],
                "others": []
            },
            "package_name": null
        },
        {
            "path": "/Users/x/Desktop/kotlin/kaangpt_kotlin/shared/src/jvmMain/kotlin/Platform.jvm.kt",
            "chunks": {
                "imports": [],
                "functions": [
                    {
                        "id": "0089",
                        "type": "function_declaration",
                        "category": "functions",
                        "name": "getPlatform",
                        "start_byte": 152,
                        "end_byte": 202,
                        "snippet": "actual fun getPlatform(): Platform = JVMPlatform()",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "classes": [
                    {
                        "id": "0088",
                        "type": "class_declaration",
                        "category": "classes",
                        "name": "JVMPlatform",
                        "start_byte": 0,
                        "end_byte": 150,
                        "snippet": "class JVMPlatform: Platform {\n    override val name: String = \"Java ${System.getProperty(\"java.version\")} OS Name: ${System.getProperty(\"os.name\")}\"\n}",
                        "exported": false,
                        "import_path": null,
                        "arcana": null
                    }
                ],
                "variables": [],
                "others": []
            },
            "package_name": null
        }
    ]
}